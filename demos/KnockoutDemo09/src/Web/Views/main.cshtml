<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Knockout Demo by Byron Sommardahl</title>

        <script src='@Url.Content("~/Scripts/knockout-2.1.0.js")'> </script>
        <script src='@Url.Content("~/Scripts/jquery-1.8.2.min.js")'> </script>
        <script src='@Url.Content("~/Scripts/jquery-ui-1.8.22.min.js")'> </script>        
        <script src='@Url.Content("~/Scripts/bootstrap.min.js")'> </script>
        <script src='@Url.Content("~/Scripts/toastr.js")'> </script>
        <script src='@Url.Content("~/Scripts/ko.extenders.numeric.js")'></script>

        <link href='@Url.Content("~/Content/bootstrap.css")' rel="stylesheet" />
        <link href='@Url.Content("~/Content/jquery-ui-1.8.16.custom.css")' rel="stylesheet" />
        <link href='@Url.Content("~/Content/toastr.css")' rel="stylesheet" />
        <link href='@Url.Content("~/Content/main.css")' rel="stylesheet" />
        
    </head>

    <body>
        <div class="navbar navbar-inverse navbar-fixed-top">
            <div class="navbar-inner">
                <div class="container">
                    <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </a>
                    <a class="brand" href="#">Cafe El Gringo</a>
                    <div class="nav-collapse collapse">
                        <ul class="nav">
                            <li class="active"><a href="#">Home</a></li>
                            <li><a href="#about">About</a></li>
                            <li><a href="#contact">Contact</a></li>              
                        </ul>
                        
                        <!--NOTE: here, I added an id to this div, and data-bindings to the username, password, and login button-->
                        <!--NOTE:  I also added another div for users who are already logged in, along with a logout link-->
                        <div class="navbar-form pull-right" id="loginView">
                            <!--NOTE: this div only shows if the user is NOT logged in-->
                            <div data-bind="if: !IsLoggedIn()">
                                <input class="span2" type="text" placeholder="Email" data-bind="value: Username"/>
                                <input class="span2" type="password" placeholder="Password" data-bind="value: Password"/>
                                <button type="submit" class="btn" data-bind="click: Login">Sign in</button>
                            </div>
                            <!--NOTE: this div only shows if the user IS logged in-->
                            <div data-bind="if: IsLoggedIn" class="loggedIn">
                                <p>Welcome <span data-bind="html: Username"></span>! <a href="#" data-bind="click: Logout">Logout</a></p>
                            </div>
                        </div>
                    </div><!--/.nav-collapse -->
                </div>
            </div>
        </div>

        <div class="container" id="productsView">
            
            <!--NOTE: I added a data-bind to this div so that it only shows to user who have NOT logged in-->
            <div data-bind="if: !IsLoggedIn()">            
                <div class="hero-unit">
                    <h1>Cafe el Gringo</h1>
                    <p>This small application demonstrates the power of the MVVM pattern in javascript using Knockout.JS. 
                        Here, we will see how a simple product control panel could work using Knockout!</p>
                    <p><a href="http://knockoutjs.com/" class="btn btn-primary btn-large">Learn more &raquo;</a></p>
                </div>                        
            </div>

            <!--NOTE: I added a data-bind to this div so that it only shows to user who HAVE logged in-->
            <div data-bind="if: IsLoggedIn">
                <div id="cashStats">
                    <div>
                        <label class="small-label">Venta:</label>
                        L<span data-bind="html: TotalCredit"></span>
                    </div>    
                    <div>
                        <label class="small-label">Ganancia:</label>
                        L<span data-bind="html: TotalProfit"></span>
                    </div>
                    <div>
                        <label class="small-label">Efectivo Disponible:</label>
                        L<span data-bind="html: TotalCash"></span>
                    </div>    
                    <div>
                        <label class="small-label">Inversion:</label>
                        L<span data-bind="html: TotalDebit"></span>
                    </div>    
                    
                </div>
            
                <h3><span data-bind="html: ProductCount"></span> Products</h3>            
                
                <!-- Example row of columns -->
                <div class="row" data-bind="foreach: Products">
                    <div class="span4">
                        <h2 data-bind="html: Name"></h2>
                        <img data-bind="attr: { src : ImageUrl, alt: Name }" class="product-image"/>
                        <div class="row">
                            <div class="span1">
                                <label class="small-label">Price</label>
                                <span data-bind="html: Price"></span>
                                <button class="btn btn-mini btn-warning" data-bind="click: $parent.EditProduct">Edit</button>                        
                            
                            </div>
                            
                            <div class="span1">
                                <label class="small-label">Quantity</label>
                                <span data-bind="html: Quantity"></span>
                                <button class="btn btn-mini" data-bind="click: Buy, enable: CanBuy">Buy</button>                            
                            </div>

                            <div class="span1">
                                <label class="small-label">Sold</label>
                                <span data-bind="html: Sold"></span> 
                                <button class="btn btn-mini" data-bind="click: Sell, enable: CanSell">Sell</button>                                                        
                            </div>
                        </div>                        
                    </div>
                </div>
                
            </div>
            <hr/>

            <footer>
                <p>Copyright &copy; Cafe El Gringo 2012</p>
            </footer>

        </div> <!-- /container -->
        
        

        <script type="text/javascript">

            //this is the code that runs upon page-load
            $(document).ready(function() {
                //NOTE: I added this globally scoped observable that can be passed around from viewModel to viewModel.
                //It keeps track of whether the user is logged in or not.
                var isLoggedIn = ko.observable();
                setupLoginView(isLoggedIn);
                setupProductView(isLoggedIn);
            });

            //NOTE: I added a viewModel for logins and bind it to the div above with the id 'loginView 
            var setupLoginView = function(isLoggedIn) {
                //the domElement is the html dom container to which we will be binding
                var domElement = $("#loginView")[0];

                //the viewModel is what we will be binding to the domElement                                
                var viewModel = new LoginViewModel(isLoggedIn, toastr);

                //finally, combine the two... bind the viewModel to the domElement
                ko.applyBindings(viewModel, domElement);
            };

            var setupProductView = function(isLoggedIn) {
                //the domElement is the html dom container to which we will be binding
                var domElement = $("#productsView")[0];

                //the viewModel is what we will be binding to the domElement                                
                //NOTE: I'm passing in isLoggedIn here...
                var viewModel = new ProductsListViewModel(isLoggedIn, toastr);

                //finally, combine the two... bind the viewModel to the domElement
                ko.applyBindings(viewModel, domElement);

                //open up a dialog upon login to display cash stats
                //NOTE: I'm subscribing to the isLoggedIn observable here so that the dialog fires when the user is logged in.
                isLoggedIn.subscribe(function() {
                    if (isLoggedIn()) {
                        var dialogWidth = 70;
                        var dialogHeight = 270;
                        var x = window.screen.availWidth - dialogWidth;
                        var y = window.screen.availHeight - dialogHeight;

                        $("#cashStats").dialog({ sticky: true, title: "Cash Stats", dialogClass: "flora", height: dialogHeight, width: dialogWidth })
                            .dialog('option', 'position', [x, y]);

                        $('.flora.ui-dialog').css({ position: "fixed" });
                    }
                });
            };

            var ProductViewModel = function(product, credit, debit, totalCash, toastr) {

                var name = ko.observable(product.Name);
                var price = ko.observable(product.Price);
                var cost = ko.observable(product.Cost);
                var quantity = ko.observable(product.Quantity);
                var sold = ko.observable(0);

                var buy = function() {
                    quantity(quantity() + 1);
                    debit(cost());
                    toastr.info("1 " + name() + " purchased.");
                };

                var sell = function() {
                    quantity(quantity() - 1);
                    sold(sold() + 1);
                    credit(this);
                    toastr.success("1 " + name() + " sold.");
                };

                var canSell = ko.computed(function() {
                    return quantity() > 0;
                });

                var canBuy = ko.computed(function() {
                    return totalCash() >= product.Cost;
                });

                return {
                    Id: product.Id,
                    Name: name,
                    Price: price,
                    Cost: cost,
                    ImageUrl: product.ImageUrl,

                    Quantity: quantity,
                    Sold: sold,

                    Buy: buy,
                    Sell: sell,
                    CanSell: canSell,
                    CanBuy: canBuy                    
                };
            };
            
            //NOTE: I added isLoggedIn here so that the list view model will know if it should be shown
            var ProductsListViewModel = function (isLoggedIn, toastr) {

                //these are our private fields
                var products = ko.observableArray();
                var totalDebit = ko.observable(0);
                var totalCredit = ko.observable(0);
                var totalCash = ko.observable(0);
                var totalProfit = ko.observable(0);

                var productCount = ko.computed(function () {
                    return products().length;
                });

                var debit = function (amount) {
                    totalDebit(totalDebit() + amount);
                    totalCash(totalCash() - amount);
                };

                var credit = function (product) {
                    totalCredit(totalCredit() + product.Price());
                    totalCash(totalCash() + product.Price());
                    totalProfit(totalProfit() + (product.Price() - product.Cost()));
                };

                var editProduct = function (product) {
                    var div = $("<div>");
                    div.load("Content/Partials/editProduct.html", function () {
                        var viewModel = new EditProductViewModel(product, onSaveProduct, onRemoveProduct);
                        ko.applyBindings(viewModel, div[0]);
                        $("body").append(div);
                        div.dialog({
                            title: "Editing Product: " + product.Name(),
                            modal: true,
                            width: 500
                        });
                    });

                    var onSaveProduct = function (editedProduct) {
                        var originalProduct = ko.utils.arrayFirst(products(), function (p) {
                            return p.Id == editedProduct.Id;
                        });
                        products.replace(originalProduct, editedProduct);
                        div.dialog('close');
                        toastr.success(editedProduct.Name() + " has been saved.");
                    };

                    var onRemoveProduct = function (removedProduct) {
                        products.remove(removedProduct);
                        div.dialog('close');
                        toastr.warning(removedProduct.Name() + " has been removed.");
                    };
                };

                //get products from the json api
                $.ajax({
                    url: "api/products",
                    success: function (productsResponse) {
                        $.each(productsResponse, function (index, product) {                            
                            products.push(new ProductViewModel(product, credit, debit, totalCash, toastr));
                        });
                        setInitialDebit();
                    }
                });

                var setInitialDebit = function () {
                    var total = 0;
                    $.each(products(), function (index, product) {
                        total = total + (product.Quantity() * product.Cost());
                    });
                    totalDebit(total);
                };

                //these are our publicly accessible properties
                return {
                    Products: products,
                    ProductCount: productCount,
                    TotalCredit: totalCredit,
                    TotalDebit: totalDebit,
                    TotalCash: totalCash,
                    TotalProfit: totalProfit,
                    EditProduct: editProduct,
                    IsLoggedIn: isLoggedIn
                };
            };

            var EditProductViewModel = function (product, onProductSaved, onProductRemoved) {

                //here are the observable fields
                var name = ko.observable(product.Name());
                //notice the price and cost fields have an extender. This ensures that input is regarded as a number.
                var price = ko.observable(product.Price()).extend({ numeric: 0 });
                var cost = ko.observable(product.Cost()).extend({ numeric: 0 });

                var profitPerItem = ko.computed(function () {
                    return price() - cost();
                });

                var projectedProfitForQuantity = ko.computed(function () {
                    return profitPerItem() * product.Quantity();
                });

                var save = function () {

                    //apply the edited values to the product
                    product.Name(name());
                    product.Price(price());
                    product.Cost(cost());

                    //send the product out
                    onProductSaved(product);
                };

                var remove = function () {
                    onProductRemoved(product);
                };

                var canRemove = ko.computed(function () {
                    return product.Quantity() == 0;
                });

                return {
                    Name: name,
                    Price: price,
                    Cost: cost,
                    ImageUrl: product.ImageUrl,
                    Quantity: product.Quantity,
                    ProfitPerItem: profitPerItem,
                    ProfitForQuantity: projectedProfitForQuantity,

                    CanRemove: canRemove,
                    Save: save,
                    Remove: remove
                };
            };
            
            //NOTE: Here's the actual viewModel for logins. Pretty simple.
            var LoginViewModel = function (isLoggedIn, toastr) {

                //these two properties map back to the inputs in the login view
                var username = ko.observable();
                var password = ko.observable();

                //the login function maps back to the login button in the view
                var login = function () {
                    if (username() == "byron@acklenavenue.com") {
                        toastr.success("Logged in as " + username() + ".");
                        isLoggedIn(true);
                    } else {
                        toastr.error("There was a problem with your username or password.");
                        username("");
                        password("");
                    }
                };

                //the logout function maps to the logout link in the view
                var logout = function () {
                    toastr.info("User " + username() + " logged out.");
                    isLoggedIn(false);
                };

                return {
                    Username: username,
                    Password: password,
                    Login: login,
                    Logout: logout,
                    IsLoggedIn: isLoggedIn
                };
            };

        </script>
    </body>
</html>